<?php
/*
 * Pepipost\PepipostLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace Pepipost\PepipostLib\Http\Controllers;

use Pepipost\PepipostLib\APIException;
use Pepipost\PepipostLib\APIHelper;
use Pepipost\PepipostLib\Configuration;
use Pepipost\PepipostLib\Models;
use Pepipost\PepipostLib\Exceptions;
use Pepipost\PepipostLib\HttpRequest\HttpRequest;
use Pepipost\PepipostLib\HttpRequest\HttpResponse;
use Pepipost\PepipostLib\HttpRequest\HttpMethod;
use Pepipost\PepipostLib\HttpRequest\HttpContext;
use Illuminate\Support\Facades\Config;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class MailSendController extends BaseController
{
    /**
     * @var MailSendController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return MailSendController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * The endpoint send is used to generate the request to pepipost server for sending an email to
     * recipients.
     *
     * @param Models\Send $body New mail request will be generated
     * @return object response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createGeneratethemailsendrequest(
        $body
    ) {

        //prepare query string for API call
        $_queryBuilder = '/mail/send';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::$BASEURI . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'content-type'  => 'application/json; charset=utf-8',
            'api_key' => config('pepipost.api_key')
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);
        
        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $request = new Request;
        $response = $request->post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        // $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
